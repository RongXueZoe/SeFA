defaults:
  - _self_
  - task: lift_image_abs
  # - task: square_image_abs
  # - task: tool_hang_image_abs
  # - task: transport_image_abs
  # - task: can_image_abs

name: train_sefa_unet_hybrid_robomimic
_target_: sefa_policy.workspace.train_sefa_unet_hybrid_workspace_robomimic.TrainSeFAUnetHybridWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: false
keypoint_visible_rate: 1.0
obs_as_global_cond: true

policy:
  _target_: sefa_policy.policy.sefa_unet_hybrid_image_robomimic_policy.SeFAUnetHybridImageRobomimicPolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small # Yilun's paper uses fixed_small_log instead, but easy to cause Nan
    clip_sample: true # required when predict_epsilon=false
    prediction_type: rf

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  crop_shape: [216, 216]
  # crop_shape: null
  diffusion_step_embed_dim: 128
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: true
  obs_encoder_group_norm: true
  eval_fixed_crop: true

  # scheduler.step params
  # predict_epsilon: true

  rf_config:
    # sampling
    sampling:
      method: 'rectified_flow'
      init_type: 'gaussian'
      init_noise_scale: 1.0
      use_ode_sampler: 'rk45' ### rk45 or euler
      ode_tol: 1e-5

ema:
  _target_: sefa_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 16
  shuffle: true
  pin_memory: true
  persistent_workers: false

val_dataloader:
  batch_size: 64
  num_workers: 16
  shuffle: false
  pin_memory: true
  persistent_workers: false

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: false
  resume: true
  only_eval: false
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 3000
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: true
  # training loop control
  # in epochs
  rollout_every: 50
  checkpoint_every: 50
  val_every: 50
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: recflow_robomimic
  resume: true
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}", "rectified flow", "RK45Solver", "crop"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: true
  save_last_snapshot: false

multi_run:
  run_dir: data/outputs-robomimic-recflow/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
use_wandb: true

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs-robomimic-recflow/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs-robomimic-recflow/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
